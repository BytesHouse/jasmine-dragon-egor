generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Product     Product[]
  SubCategory SubCategory[]
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int         @default(1)
  total         Float
  status        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  address       String?
  orderNumber   String?
  city          String?
  country       String?
  deliveryPrice String?
  email         String?
  fullName      String?
  lang          String?
  message       String?
  phone         String?
  sector        String?
  totalPrice    String?
  User          User        @relation(fields: [userId], references: [id])
  OrderItem     OrderItem[]
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String
  description   String
  price         String
  stock         Int
  categoryId    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  discount      Float?       @default(0.0)
  subCategoryId Int?
  currency      String       @default("MDL")
  imageUrl      String[]
  descriptionRo String?
  nameRo        String?
  Category      Category     @relation(fields: [categoryId], references: [id])
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  Review        Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  categoryId Int
  Product    Product[]
  Category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order[]
  Review    Review[]
}

model Critique {
  id        Int      @id @default(autoincrement())
  userId    Int      @default(1)
  text      String?
  avatar    String?
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  name      String
  orderId   Int
  productId Int
  quantity  Int
  price     String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
